{
  "author": {
    "name": "ql.io"
  },
  "contributors": [
    {
      "name": "Subbu Allamaraju",
      "email": "subbU@ebaysf.com"
    }
  ],
  "name": "charlie",
  "description": "Charlie knows",
  "version": "0.0.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/ql-io/charlie"
  },
  "main": "lib/charlie.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "optionalDependencies": {},
  "devDependencies": {
    "nodeunit": ""
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "readme": "Charlie is a node module keeps of success and failures of network requests and adises on a delay\nbetween attempts using the backoff algorithm described in [Exponential Backoff in Distributed\nSystems](http://dthain.blogspot.com/2009/02/exponential-backoff-in-distributed.html).\n\nThis module applies skips upto three failures before starting the backoff.\n\n![Travis status](https://secure.travis-ci.org/ql-io/charlie.png)\n\n## Getting Charlie\n\n    npm install charlie\n\n## Usage\n\n### charlie.ask\n\nBefore making a request to an origin, let charlie know. This functiont akes three arguments:\n\n* `keys`: An array of keys used to identify the network resource. For HTTP requests, the keys could\n  be the URI of the resource, or the IP address, or the host name etc.\n* `minDelay`: Minimum backoff delay. As suggested in the blog post above, choose a value under which\n  99% of requests complete.\n* `maxDelay`: Maximum backoff delay. Choose an acceptable value based on availability requirements.\n\nThis function returns a decision with three fields:\n\n* `state`: values are `go` or `nogo`\n* `count`: number of failures so far. The count is reset after a success.\n* `delay`: currently applied backoff delay\n\nHere is an example.\n\n    // Arr is an array of keys used to identify the network resource.\n    var decision = charlie.ask(arr, minDelay, maxDelay);\n    if(decision.state === 'go') {\n        // make the request\n    }\n    else {\n        // don't make the request\n        console.log('Waiting until ' + decision.delay);\n    }\n\n### charlie.ok\n\nWhen a request succeeds, tell charlie.\n\n    charlie.ok(arr);\n\n### charlie.notok\n\nWhen the request fails, tell charlie any way.\n\n    charlie.notok(arr);\n\n### charlie.clear\n\nForget everything about the resource.\n\n    charlie.clear(arr);\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "charlie@0.0.5",
  "_from": "charlie@0.0.5"
}
